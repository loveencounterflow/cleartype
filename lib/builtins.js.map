{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/builtins.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\nprimitive_types = Object.freeze [ 'null', 'undefined', 'infinity', 'boolean', 'nan', 'float', 'anyfloat', 'text', ]\nct_kinds        = Object.freeze [ '$unspecified', '$enumeration', '$record', '$variant', ]\n\n\n\n#===========================================================================================================\ngnd =\n  anything:       isa: ( x ) -> true\n  primitive:      isa: ( x ) -> primitive_types.includes type_of x\n  boolean:        isa: ( x ) -> ( x is true ) or ( x is false )\n  function:       isa: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:  isa: ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:         isa: ( x ) -> ( typeof x ) is 'symbol'\n  object:         isa: ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  pod:            isa: ( x ) -> x? and x.constructor in [ Object, undefined, ]\n  float:          isa: ( x ) -> Number.isFinite x\n  integer:        isa: ( x ) -> Number.isInteger x\n  text:           isa: ( x ) -> ( typeof x ) is 'string'\n  nonempty_text:  isa: ( x ) -> ( typeof x ) is 'string' and ( x.length > 0 )\n  set:            isa: ( x ) -> x instanceof Set\n  map:            isa: ( x ) -> x instanceof Map\n  list:           isa: ( x ) -> Array.isArray x\n  nonempty_list:  isa: ( x ) -> ( Array.isArray x ) and ( x.length > 0 )\n  #.........................................................................................................\n  nullary:        isa: ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n  unary:          isa: ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n  binary:         isa: ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n  trinary:        isa: ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n\n\n#-----------------------------------------------------------------------------------------------------------\ntype_of = ( x ) ->\n  #.........................................................................................................\n  ### Primitives: ###\n  return 'null'         if x is null\n  return 'undefined'    if x is undefined\n  return 'infinity'     if ( x is +Infinity ) or ( x is -Infinity )\n  return 'boolean'      if ( x is true ) or ( x is false )\n  return 'nan'          if Number.isNaN     x\n  return 'float'        if Number.isFinite  x\n  # return 'pod'          if B.isa.pod x\n  #.........................................................................................................\n  switch jstypeof = typeof x\n    when 'string'                       then return 'text'\n  #.........................................................................................................\n  return 'list'         if Array.isArray  x\n  ### TAINT consider to return x.constructor.name ###\n  switch millertype = ( ( Object::toString.call x ).replace /^\\[object ([^\\]]+)\\]$/, '$1' ).toLowerCase()\n    when 'regexp'                       then return 'regex'\n  return millertype\n  # switch millertype = Object::toString.call x\n  #   when '[object Function]'            then return 'function'\n  #   when '[object AsyncFunction]'       then return 'asyncfunction'\n  #   when '[object GeneratorFunction]'   then return 'generatorfunction'\n\n\n#===========================================================================================================\nmodule.exports = { gnd, type_of, primitive_types, ct_kinds, }\n"
  ]
}