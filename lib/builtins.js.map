{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/builtins.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\n# primitive_types = Object.freeze [ 'null', 'undefined', 'infinity', 'boolean', 'nan', 'float', 'anyfloat', 'text', ]\n# ct_kinds        = Object.freeze [ '$unspecified', '$enumeration', '$record', '$variant', ]\npod_prototypes  = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\n\n\n#===========================================================================================================\ngnd =\n  anything:       isa:  ( x ) -> true\n  primitive:      isa:  ( x ) -> primitive_types.includes type_of x\n  #.........................................................................................................\n  ### NOTE types 'simple' and 'compound' more or less boil down to x being a POD, their explicit definition\n  are for clarity and to allow for later modification ###\n  simple:         isa:  ( x ) -> ( not x? ) or ( not gnd.compound.isa x )\n  compound:       isa:  ( x ) -> gnd.pod.isa x\n  #.........................................................................................................\n  boolean:        isa:  ( x ) -> ( x is true ) or ( x is false )\n  function:       isa:  ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:  isa:  ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:         isa:  ( x ) -> ( typeof x ) is 'symbol'\n  object:         isa:  ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  float:          isa:  ( x ) -> Number.isFinite x\n  integer:        isa:  ( x ) -> Number.isInteger x\n  text:           isa:  ( x ) -> ( typeof x ) is 'string'\n  nonempty_text:  isa:  ( x ) -> ( typeof x ) is 'string' and ( x.length > 0 )\n  set:            isa:  ( x ) -> x instanceof Set\n  map:            isa:  ( x ) -> x instanceof Map\n  list:           isa:  ( x ) -> Array.isArray x\n  nonempty_list:  isa:  ( x ) -> ( Array.isArray x ) and ( x.length > 0 )\n  kind:           isa:  ( x ) -> x in [ 'simple', 'compound', ]\n  #.........................................................................................................\n  # nullary:        isa:  ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n  # unary:          isa:  ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n  # binary:         isa:  ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n  # trinary:        isa:  ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n  #.........................................................................................................\n  # pod:            isa:  ( x ) -> x? and x.constructor in [ Object, undefined, ]\n  pod:\n    isa:                ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n    get_template:             -> Object.create null\n  nullo:          isa:  ( x ) -> ( Object.getPrototypeOf x ) is null\n  type:           isa:  ( x ) -> x? and x instanceof ( require './main' ).Type\n  dcl_field:      isa:  ( x ) -> gnd.type.isa x\n  #.........................................................................................................\n  dcl:\n    isa: ( x ) ->\n      return false unless gnd.compound.isa      x\n      return false unless gnd.nonempty_text.isa x.name\n      return false unless gnd.kind.isa          x.kind\n      return false unless gnd.type.isa          x.base\n      return false unless gnd.nullo.isa         x.fields\n      return false unless gnd.nullo.isa         x.template\n      return false unless gnd.boolean.isa       x.has_fields\n      return false unless gnd.boolean.isa       x.has_template\n      return false unless gnd.boolean.isa       x.has_base\n      return false unless gnd.boolean.isa       x.is_creatable\n      return true\n    get_template: ->\n      name:           null\n      base:           null\n      fields:         null\n      template:       null\n      has_fields:     null\n      has_template:   null\n      has_base:       null\n      kind:           null\n      is_creatable:   null\n\n#-----------------------------------------------------------------------------------------------------------\nkind_of = ( x ) -> if ( gnd.compound.isa x ) then 'compound' else 'simple'\n\n#-----------------------------------------------------------------------------------------------------------\ntype_of = ( x ) ->\n  #.........................................................................................................\n  ### Primitives: ###\n  return 'null'         if x is null\n  return 'undefined'    if x is undefined\n  return 'infinity'     if ( x is +Infinity ) or ( x is -Infinity )\n  return 'boolean'      if ( x is true ) or ( x is false )\n  return 'nan'          if Number.isNaN     x\n  return 'float'        if Number.isFinite  x\n  # return 'pod'          if B.isa.pod x\n  #.........................................................................................................\n  switch jstypeof = typeof x\n    when 'string'                       then return 'text'\n  #.........................................................................................................\n  return 'list'         if Array.isArray  x\n  ### TAINT consider to return x.constructor.name ###\n  switch millertype = ( ( Object::toString.call x ).replace /^\\[object ([^\\]]+)\\]$/, '$1' ).toLowerCase()\n    when 'regexp'                       then return 'regex'\n  return millertype\n  # switch millertype = Object::toString.call x\n  #   when '[object Function]'            then return 'function'\n  #   when '[object AsyncFunction]'       then return 'asyncfunction'\n  #   when '[object GeneratorFunction]'   then return 'generatorfunction'\n\n#-----------------------------------------------------------------------------------------------------------\nvalidate = ( type, x ) ->\n  return x if type.isa x\n  throw new Cleartype_type_validation_error \"Ω___1 expected a #{type.name}, got a #{type_of x}\"\n\n\n#===========================================================================================================\nmodule.exports = { gnd, kind_of, type_of, validate, }\n"
  ]
}