{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/builtins.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,QAAA,EAAA,eAAA,EAAA,GAAA,EAAA,OAAA;;;EAGA,eAAA,GAAkB,MAAM,CAAC,MAAP,CAAc,CAAE,MAAF,EAAU,WAAV,EAAuB,UAAvB,EAAmC,SAAnC,EAA8C,KAA9C,EAAqD,OAArD,EAA8D,UAA9D,EAA0E,MAA1E,CAAd;;EAClB,QAAA,GAAkB,MAAM,CAAC,MAAP,CAAc,CAAE,cAAF,EAAkB,cAAlB,EAAkC,SAAlC,EAA6C,UAA7C,CAAd,EAJlB;;;EASA,GAAA,GACE;IAAA,QAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS;MAAT;IAAd,CADF;IAEA,SAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,eAAe,CAAC,QAAhB,CAAyB,OAAA,CAAQ,CAAR,CAAzB;MAAT;IAAd,CAHF;IAIA,OAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,CAAA,KAAK,IAAP,CAAA,IAAiB,CAAE,CAAA,KAAK,KAAP;MAA1B;IAAd,CALF;IAMA,QAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC,CAAd;MACA,OAAA,EAAc,QAAA,CAAA,CAAA;eAAK,QAAA,CAAA,CAAA;iBAAG;QAAH;MAAL;IADd,CAPF;IASA,aAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC,CAAd;MACA,OAAA,EAAc,QAAA,CAAA,CAAA;eAAK,MAAA,QAAA,CAAA,CAAA;iBAAG,CAAA,MAAM,IAAN;QAAH;MAAL;IADd,CAVF;IAYA,MAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB,CAAd;MACA,OAAA,EAAc,QAAA,CAAA,GAAE,CAAF,CAAA;eAAY,MAAA,CAAO,IAAC,CAAA,EAAE,CAAC,MAAJ,CAAW,GAAG,CAAC,IAAf,EAAqB,GAAA,CAArB,CAAP;MAAZ;IADd,CAbF;IAeA,MAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,OAAO,CAAP,KAAY,QAAd,CAAP,IAAoC,CAAE,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B,iBAAjC;MAA7C,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;eAAW,CAAE,GAAA,GAAF;MAAX;IADd,CAhBF;IAkBA,GAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;AAAQ,YAAA;eAAC,WAAA,YAAO,CAAC,CAAC,iBAAiB,UAAnB,QAA2B;MAA3C,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;eAAW,MAAM,CAAC,MAAP,CAAgB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAhB,EAAsC,GAAtC;MAAX;IADd,CAnBF;IAqBA,KAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,QAAP,CAAgB,CAAhB;MAAT,CAAd;MACA,OAAA,EAAc,QAAA,CAAA,CAAA;eAAG;MAAH;IADd,CAtBF;IAwBA,OAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,SAAP,CAAiB,CAAjB;MAAT,CAAd;MACA,OAAA,EAAc,QAAA,CAAA,CAAA;eAAG;MAAH;IADd,CAzBF;IA2BA,IAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;AAAU,YAAA;eAAC;;AAAE;UAAA,KAAA,QAAA;yBAAA;UAAA,CAAA;;YAAF,CAAoB,CAAC,IAArB,CAA0B,EAA1B;MAAX;IADd,CA5BF;IA8BA,aAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB,QAAhB,IAA6B,CAAE,CAAC,CAAC,MAAF,GAAW,CAAb;MAAtC,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;AAAU,YAAA;eAAC;;AAAE;UAAA,KAAA,QAAA;yBAAA;UAAA,CAAA;;YAAF,CAAoB,CAAC,IAArB,CAA0B,EAA1B;MAAX;IADd,CA/BF;IAiCA,GAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,YAAa;MAAtB,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;eAAW,IAAI,GAAJ,eAAQ,MAAM,EAAd;MAAX;IADd,CAlCF;IAoCA,GAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,YAAa;MAAtB,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;eAAW,IAAI,GAAJ,eAAQ,MAAM,EAAd;MAAX;IADd,CArCF;IAuCA,IAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,KAAK,CAAC,OAAN,CAAc,CAAd;MAAT,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;AAAU,YAAA,GAAA,EAAA,OAAA,EAAA;AAAG;AAAA;QAAA,KAAA,QAAA;uBAAA;QAAA,CAAA;;MAAb;IADd,CAxCF;IA0CA,aAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,KAAK,CAAC,OAAN,CAAc,CAAd,CAAF,CAAA,IAAwB,CAAE,CAAC,CAAC,MAAF,GAAW,CAAb;MAAjC,CAAd;MACA,OAAA,EAAc,QAAA,CAAE,GAAF,CAAA;AAAU,YAAA,GAAA,EAAA,OAAA,EAAA;AAAG;AAAA;QAAA,KAAA,QAAA;uBAAA;QAAA,CAAA;;MAAb;IADd,CA3CF;;IA8CA,OAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAd,CA/CF;IAgDA,KAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAd,CAjDF;IAkDA,MAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAd,CAnDF;IAoDA,OAAA,EACE;MAAA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAd;EArDF,EAVF;;;EAmEA,OAAA,GAAU,QAAA,CAAE,CAAF,CAAA,EAAA;;AACV,QAAA,QAAA,EAAA;IAEE,IAAyB,CAAA,KAAK,IAA9B;;;AAAA,aAAO,OAAP;;IACA,IAAyB,CAAA,KAAK,MAA9B;AAAA,aAAO,YAAP;;IACA,IAAyB,CAAE,CAAA,KAAK,CAAC,KAAR,CAAA,IAAsB,CAAE,CAAA,KAAK,CAAC,KAAR,CAA/C;AAAA,aAAO,WAAP;;IACA,IAAyB,CAAE,CAAA,KAAK,IAAP,CAAA,IAAiB,CAAE,CAAA,KAAK,KAAP,CAA1C;AAAA,aAAO,UAAP;;IACA,IAAyB,MAAM,CAAC,KAAP,CAAiB,CAAjB,CAAzB;AAAA,aAAO,MAAP;;IACA,IAAyB,MAAM,CAAC,QAAP,CAAiB,CAAjB,CAAzB;AAAA,aAAO,QAAP;KAPF;;;AAUE,YAAO,QAAA,GAAW,OAAO,CAAzB;AAAA,WACO,QADP;AAC2C,eAAO;AADlD;IAGA,IAAyB,KAAK,CAAC,OAAN,CAAe,CAAf,CAAzB;;AAAA,aAAO,OAAP;;IAEA,UAAA,GAAa,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB;AACb,WAAO,CAAE,UAAU,CAAC,OAAX,CAAmB,uBAAnB,EAA4C,IAA5C,CAAF,CAAoD,CAAC,WAArD,CAAA;EAjBC,EAnEV;;;;;;;;EA4FA,MAAM,CAAC,OAAP,GAAiB,CAAE,GAAF,EAAO,OAAP,EAAgB,eAAhB,EAAiC,QAAjC;AA5FjB",
  "sourcesContent": [
    "\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\nprimitive_types = Object.freeze [ 'null', 'undefined', 'infinity', 'boolean', 'nan', 'float', 'anyfloat', 'text', ]\nct_kinds        = Object.freeze [ '$unspecified', '$enumeration', '$record', '$variant', ]\n\n\n\n#===========================================================================================================\nstd =\n  anything:\n    $isa:         ( x ) -> true\n  primitive:\n    $isa:         ( x ) -> primitive_types.includes type_of x\n  boolean:\n    $isa:         ( x ) -> ( x is true ) or ( x is false )\n  function:\n    $isa:         ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    $create:      -> ( -> null )\n  asyncfunction:\n    $isa:         ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n    $create:      -> ( -> await null )\n  symbol:\n    $isa:         ( x ) -> ( typeof x ) is 'symbol'\n    $create:      ( P... ) -> Symbol @ct.create std.text, P...\n  object:\n    $isa:         ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n    $create:      ( cfg ) -> { cfg..., }\n  pod:\n    $isa:         ( x ) -> x? and x.constructor in [ Object, undefined, ]\n    $create:      ( cfg ) -> Object.assign ( Object.create null ), cfg\n  float:\n    $isa:         ( x ) -> Number.isFinite x\n    $create:      -> 0\n  integer:\n    $isa:         ( x ) -> Number.isInteger x\n    $create:      -> 0\n  text:\n    $isa:         ( x ) -> ( typeof x ) is 'string'\n    $create:      ( cfg ) -> ( e for e from cfg ).join ''\n  nonempty_text:\n    $isa:         ( x ) -> ( typeof x ) is 'string' and ( x.length > 0 )\n    $create:      ( cfg ) -> ( e for e from cfg ).join ''\n  set:\n    $isa:         ( x ) -> x instanceof Set\n    $create:      ( cfg ) -> new Set cfg ? []\n  map:\n    $isa:         ( x ) -> x instanceof Map\n    $create:      ( cfg ) -> new Map cfg ? []\n  list:\n    $isa:         ( x ) -> Array.isArray x\n    $create:      ( cfg ) -> ( x for x from cfg ? [] )\n  nonempty_list:\n    $isa:         ( x ) -> ( Array.isArray x ) and ( x.length > 0 )\n    $create:      ( cfg ) -> ( x for x from cfg ? [] )\n  #.........................................................................................................\n  nullary:\n    $isa:         ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n  unary:\n    $isa:         ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n  binary:\n    $isa:         ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n  trinary:\n    $isa:         ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n\n\n#-----------------------------------------------------------------------------------------------------------\ntype_of = ( x ) ->\n  #.........................................................................................................\n  ### Primitives: ###\n  return 'null'         if x is null\n  return 'undefined'    if x is undefined\n  return 'infinity'     if ( x is +Infinity ) or ( x is -Infinity )\n  return 'boolean'      if ( x is true ) or ( x is false )\n  return 'nan'          if Number.isNaN     x\n  return 'float'        if Number.isFinite  x\n  # return 'pod'          if B.isa.pod x\n  #.........................................................................................................\n  switch jstypeof = typeof x\n    when 'string'                       then return 'text'\n  #.........................................................................................................\n  return 'list'         if Array.isArray  x\n  ### TAINT consider to return x.constructor.name ###\n  millertype = Object::toString.call x\n  return ( millertype.replace /^\\[object ([^\\]]+)\\]$/, '$1' ).toLowerCase()\n  # switch millertype = Object::toString.call x\n  #   when '[object Function]'            then return 'function'\n  #   when '[object AsyncFunction]'       then return 'asyncfunction'\n  #   when '[object GeneratorFunction]'   then return 'generatorfunction'\n\n\n#===========================================================================================================\nmodule.exports = { std, type_of, primitive_types, ct_kinds, }\n"
  ]
}