{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n{ gnd\n  type_of               } = require './builtins'\n#-----------------------------------------------------------------------------------------------------------\n{ hide\n  # get_instance_methods\n  bind_instance_methods\n  nameit\n  debug\n  warn\n  help\n  rpr                   } = require './helpers'\n\n\n#===========================================================================================================\ninternals = new class Internals then constructor: ->\n  @gnd  = gnd\n  return undefined\n\n#===========================================================================================================\nclass Cleartype_error                       extends Error\nclass Cleartype_arguments_not_allowed_error extends Cleartype_error\nclass Cleartype_type_validation_error       extends Cleartype_error\nclass Cleartype_kind_mismatch_error         extends Cleartype_error\nclass Cleartype_nocreate_error              extends Cleartype_error\nclass Cleartype_notemplate_error            extends Cleartype_error\n\n\n#===========================================================================================================\nvalidate = ( type, x ) ->\n  return x if type.isa x\n  throw new Cleartype_type_validation_error \"Ω___1 expected a #{type.name}, got a #{type_of x}\"\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    throw new Cleartype_arguments_not_allowed_error \"Ω___2 arguments not allowed\" if arguments.length isnt 0\n    bind_instance_methods @\n    hide @, 'name', @constructor.name.toLowerCase()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( typename, dcl ) ->\n    ### TAINT should wrap b/c of names? ###\n    return dcl if dcl instanceof @constructor\n    dcl = { dcl..., name: typename, }\n    #.......................................................................................................\n    Object.assign dcl, @_compile_base     dcl\n    Object.assign dcl, @_compile_fields   dcl\n    Object.assign dcl, @_compile_template dcl\n    Object.assign dcl, @_compile_isa      dcl\n    Object.assign dcl, @_compile_create   dcl\n    #.......................................................................................................\n    ### TAINT should we differentiate instance properties from prototype methods? ###\n    clasz = class extends dcl.baseclass\n      #.....................................................................................................\n      constructor: ( P... ) ->\n        super P...\n        hide @, 'name',         dcl.name\n        hide @, 'base',         dcl.base\n        hide @, 'fields',       dcl.fields\n        hide @, 'template',     dcl.template\n        hide @, 'has_fields',   dcl.has_fields\n        hide @, 'has_template', dcl.has_template\n        hide @, 'has_base',     dcl.has_base\n        hide @, 'is_compound',  dcl.is_compound\n        hide @, 'is_creatable', dcl.is_creatable\n        return undefined\n      #.....................................................................................................\n      isa:          dcl.isa\n      create:       dcl.create\n      get_template: dcl.get_template\n    nameit ( @_classname_from_typename dcl.name ), clasz\n    return new clasz()\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_base: ( dcl ) ->\n    has_base  = false\n    baseclass = @constructor\n    base      = null\n    ### TAINT condition should use API like 'has_property_but_value_isnt_null()' (?name?) ###\n    # if ( Reflect.has dcl, 'base' ) and ( dcl.base isnt null )\n    if dcl.base?\n      unless ( dcl.base instanceof @constructor )\n        ### TAINT use `type_of()` ###\n        throw new Error \"Ω___3 dcl.base must be instanceof #{rpr @}, got #{rpr dcl.base}\"\n      has_base  = true\n      ### NOTE redundant here but needed when we allow typenames for base ###\n      base      = dcl.base\n      baseclass = dcl.base.constructor\n    return { has_base, base, baseclass, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_fields: ( dcl ) ->\n    has_fields  = false\n    fields      = Object.create null\n    is_compound = null\n    sources     = []\n    #.......................................................................................................\n    if dcl.has_base\n      sources.push dcl.base.fields\n      is_compound = dcl.base.is_compound\n    #.......................................................................................................\n    if dcl.fields?\n      validate gnd.compound, dcl.fields\n      sources.push dcl.fields\n      if dcl.has_base and ( dcl.is_compound isnt true )\n        throw new Cleartype_kind_mismatch_error \"Ω___4 type #{dcl.name} is declared as a compound type kind but its base #{base.name} isn't\"\n      is_compound = true\n    #.......................................................................................................\n    for source in sources\n      for sub_name, sub_field of ( source ? {} )\n        has_fields          = true\n        fields[ sub_name ]  = sub_field\n    ### Note at this point is_compound can be any of `null`, `true`, `false` ###\n    return { has_fields, fields, is_compound, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_template: ( dcl ) ->\n    has_template  = Reflect.has dcl, 'template'\n    template      = Object.create null\n    sources       = []\n    get_template  = -> throw new Cleartype_notemplate_error \"Ω___5 type #{dcl.name} doesn't have a template\"\n    #.......................................................................................................\n    if has_template\n      if gnd.function.isa dcl.template\n        debug 'Ω___6', dcl.name, \"_compile_template\"\n        template      = dcl.template\n        get_template  = -> template.call @\n      #.......................................................................................................\n      else if gnd.simple.isa dcl.template\n        debug 'Ω___7', dcl.name, \"_compile_template\", rpr dcl.template\n        template      = dcl.template\n        get_template  = -> template\n    #.......................................................................................................\n    else if dcl.has_base and dcl.base.has_template\n      debug 'Ω___8', dcl.name, \"_compile_template\"\n      sources.push dcl.base.template\n    # #.......................................................................................................\n    # if dcl.template?\n    #   validate gnd.compound dcl.fields\n    #   sources.push dcl.fields\n    #   if has_base and ( is_compound isnt true )\n    #     throw new Cleartype_kind_mismatch_error \"Ω___9 type #{dcl.name} is declared as a compound type kind but its base #{base.name} isn't\"\n    #   is_compound = true\n    # #.......................................................................................................\n    # for source in [ base?.template, dcl.template, ]\n    #   for sub_name, sub_template of ( source ? {} )\n    #     has_template          = true\n    #     producer              = if ( gnd.function.isa sub_template ) then sub_template else \\\n    #       do ( value = sub_template ) -> -> sub_template\n    #     ### TIANT use API call ###\n    #     template[ sub_name ]  = nameit \"create_#{dcl.name}_#{sub_name}\", producer\n    # return { has_template, template, is_compound, }\n    get_template = nameit ( @_method_name_from_typename 'get_template_for', dcl.name ), get_template\n    return { has_template, template, get_template, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_isa: ( dcl ) ->\n    if ( isa = dcl.isa )?\n      if isa instanceof @constructor\n        isa = do ( other_type = isa ) -> ( x ) -> other_type.isa x\n      validate gnd.function, dcl.isa\n    #.......................................................................................................\n    ### TAINT decomplect logic ###\n    else\n      if dcl.has_fields\n        isa = @_get_isa_for_fields dcl\n      else\n        unless dcl.has_base\n          throw new Error \"Ω__10 type declaration must have one of 'fields', 'isa' or 'base' properties, got none\"\n        isa = ( x ) -> true\n    #.......................................................................................................\n    if dcl.has_base\n      isa = do ( base = dcl.base, isa ) -> ( x ) -> ( base.isa x ) and ( isa.call @, x )\n    #.......................................................................................................\n    isa = nameit ( @_method_name_from_typename 'isa', dcl.name ), isa\n    return { isa, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_create: ( dcl ) ->\n    create = -> throw new Cleartype_nocreate_error \"Ω__11 unable to create a #{dcl.name}\"\n    if dcl.create?\n      validate gnd.function, dcl.create\n      create = do ( create = dcl.create                       ) -> ( P... ) -> @validate create.call @, P...\n    else if dcl.has_base and ( not dcl.has_fields )\n      create = do ( create = dcl.base.create, base =dcl.base  ) -> ( P... ) -> @validate create.call base, P...\n    ### TAINT provide create when there are fields but no create() ###\n    else if dcl.has_fields\n      debug 'Ω__12'\n    create = nameit ( @_method_name_from_typename 'create', dcl.name ), create\n    return { create, }\n\n  #=========================================================================================================\n  _get_isa_for_fields: ( dcl ) -> ( x ) ->\n    return false unless x?\n    ### TAINT in the future, should allow extending e.g. lists with fields? ###\n    return false unless gnd.pod.isa x\n    for field_name, subtype of dcl.fields\n      continue if subtype.isa x[ field_name ]\n      ### TAINT use type_of ###\n      rejection = \"expected a #{subtype.name} for field #{rpr field_name}, got #{rpr x[ field_name ]}\"\n      # warn 'Ω__13', rejection\n      return false\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _classname_from_typename: ( typename = null ) ->\n    R = ( typename ? 'anonymous' )\n    ### TAINT not Unicode-compliant ###\n    return ( R[ 0 ] ).toUpperCase() + R[ 1 .. ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _method_name_from_typename: ( methodname, typename = null ) ->\n    R = ( typename ? '(anonymous)' )\n    return \"#{methodname}_#{typename}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( x ) ->\n    return x if @isa x\n    throw new Cleartype_type_validation_error \"Ω__14 validation error: expected a #{@name}, got a #{type_of x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: nameit 'isa_type', ( x ) -> x instanceof @constructor\n\n#===========================================================================================================\nclass Typespace\n\n  #---------------------------------------------------------------------------------------------------------\n  add_types: ( dcls ) ->\n    ### TAINT name collisions possible ###\n    for typename, dcl of dcls\n      if Reflect.has @, typename\n        throw new Error \"Ω__15 name collision: type / property #{rpr typename} already declared\"\n      @[ typename ] = type.create typename, dcl\n    return null\n\n#===========================================================================================================\ntype      = new Type()\nstd       = new Typespace()\n\n#===========================================================================================================\nstd.add_types\n  #.........................................................................................................\n  text:\n    isa:      ( x ) -> ( typeof x ) is 'string' # ( Object::toString.call x ) is '[object String]'\n    ### NOTE just returning argument which will be validated; only strings pass so `create value` is a no-op / validation only ###\n    create:   ( x ) -> return if ( arguments.length is 0 ) then '' else x\n    template: ''\n  #.........................................................................................................\n  float:\n    isa:      ( x ) -> Number.isFinite x\n    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #.........................................................................................................\n  integer:\n    isa:      ( x ) -> Number.isInteger x\n    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n    template: 0\n  #.........................................................................................................\n  list:\n    isa:      ( x ) -> Array.isArray x\n    # create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n    template: -> []\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  ###\n  nonempty_text:\n    isa:      std.text\n    refine:   ( x ) -> ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  ###\n  #.........................................................................................................\n  nonempty_text:\n    base:  std.text\n    # isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )\n    isa:      ( x ) -> x.length isnt 0\n  #.........................................................................................................\n  quantity_q:\n    base:  std.float\n    # isa: std.float.isa\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity_u:\n    base:  std.nonempty_text\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity:\n    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n  #.........................................................................................................\n  quantity_with_template:\n    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n    template:\n      q:      'u'\n\n#===========================================================================================================\nmodule.exports = { std, type_of, Type, Typespace, internals, }\n\n"
  ]
}