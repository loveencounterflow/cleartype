{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ debug\n  help    }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr     }               = GUY.trm\n\n\n###\n\n# from `ltsort` which uses an outdated version of `intertype`:\n\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new CLeartype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs      ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n###\n\n#===========================================================================================================\nclass Cleartype_error extends Error\nclass Cleartype_validation_error extends Cleartype_error\n\n\n#===========================================================================================================\nclass CLeartype\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @_contexts = if false then new WeakMap() else new Map ### TAINT this is going to be configurable for testing ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_ctx: ( type ) ->\n    return ( R = @_contexts.get type ) if R?\n    @_contexts.set type, R = Object.freeze { me: type, types: @, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: ( type, x ) ->\n    return type.$isa.call ( @_get_ctx type ), x\n\n  #---------------------------------------------------------------------------------------------------------\n  isa_optional: ( type, x ) -> ( not x? ) or ( @isa type, x )\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( type, x ) ->\n    return x if @isa type, x\n    throw new Cleartype_validation_error \"Ωpmi___1 validation error\\n#{rpr type}\\n#{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate_optional: ( type, x ) ->\n    return x if @isa_optional type, x\n    throw new Cleartype_validation_error \"Ωpmi___2 validation error\\n#{rpr type}\\n#{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( type, P... ) ->\n    return @validate type, type.$create.call ( @_get_ctx type ), P...\n\n#===========================================================================================================\nct = new CLeartype()\n\n\n# #===========================================================================================================\n# class Type\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( declaration ) ->\n#     @$isa     = declaration.$isa\n#     @$create  = declaration.$create\n#     return undefined\n\n#   # #---------------------------------------------------------------------------------------------------------\n#   # $isa: ->\n#   # $create: ->\n\n\n#===========================================================================================================\nt =\n  anything:\n    $isa: ( x ) -> true\n    # $create: ( cfg ) ->\n  boolean:\n    $isa: ( x ) -> ( x is true ) or ( x is false )\n    # $create: ( cfg ) ->\n  function:\n    $isa: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    $create: -> ( -> null )\n  asyncfunction:\n    $isa: ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n    $create: -> ( -> await null )\n  symbol:\n    $isa: ( x ) -> ( typeof x ) is 'symbol'\n    # $create: ( cfg ) ->\n  object:\n    $isa: ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n    $create: ( cfg ) -> { cfg..., }\n  float:\n    $isa: ( x ) -> Number.isFinite x\n    $create: -> 0\n  text:\n    $isa: ( x ) -> ( typeof x ) is 'string'\n    $create: -> ''\n  nullary:\n    $isa: ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n    # $create: ( cfg ) ->\n  unary:\n    $isa: ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n    # $create: ( cfg ) ->\n  binary:\n    $isa: ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n    # $create: ( cfg ) ->\n  trinary:\n    $isa: ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n    # $create: ( cfg ) ->\n  set:\n    $isa: ( x ) -> x instanceof Set\n    $create: ( cfg ) -> new Set cfg ? []\n  map:\n    $isa: ( x ) -> x instanceof Map\n    $create: ( cfg ) -> new Map cfg ? []\n  list:\n    $isa: ( x ) -> Array.isArray x\n    $create: ( cfg ) -> ( x for x from cfg ? [] )\n\n\n#===========================================================================================================\nmodule.exports = { CLeartype, ct, }\n"
  ]
}