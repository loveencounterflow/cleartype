{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n{ gnd\n  kind_of\n  validate\n  type_of               } = require './builtins'\n#-----------------------------------------------------------------------------------------------------------\n{ hide\n  # get_instance_methods\n  bind_instance_methods\n  nameit\n  debug\n  warn\n  help\n  rpr                   } = require './helpers'\nE                         = require './errors'\n\n\n#===========================================================================================================\ninternals = new class Internals then constructor: ->\n  @gnd  = gnd\n  return undefined\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    throw new E.Cleartype_arguments_not_allowed_error \"Ωct___1 arguments not allowed\" if arguments.length isnt 0\n    bind_instance_methods @\n    hide @, 'name', @constructor.name.toLowerCase()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( typename, dcl ) ->\n    ### TAINT should wrap b/c of names? ###\n    return dcl if dcl instanceof @constructor\n    dcl = { gnd.dcl.get_template()..., dcl..., name: typename, }\n    #.......................................................................................................\n    Object.assign dcl, @_compile_base     dcl\n    Object.assign dcl, @_compile_kind     dcl\n    Object.assign dcl, @_compile_fields   dcl\n    Object.assign dcl, @_compile_template dcl\n    Object.assign dcl, @_compile_isa      dcl\n    Object.assign dcl, @_compile_create   dcl\n    #.......................................................................................................\n    ### TAINT should we differentiate instance properties from prototype methods? ###\n    clasz = class extends dcl.baseclass\n      #.....................................................................................................\n      constructor: ( P... ) ->\n        super P...\n        hide @, 'name',         dcl.name\n        hide @, 'kind',         dcl.kind\n        hide @, 'base',         dcl.base\n        hide @, 'fields',       dcl.fields\n        hide @, 'template',     dcl.template\n        hide @, 'has_fields',   dcl.has_fields\n        hide @, 'has_template', dcl.has_template\n        hide @, 'has_base',     dcl.has_base\n        hide @, 'is_creatable', dcl.is_creatable\n        return undefined\n      #.....................................................................................................\n      isa:          dcl.isa\n      create:       dcl.create\n      get_template: dcl.get_template\n    nameit ( @_classname_from_typename dcl.name ), clasz\n    return new clasz()\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_base: ( dcl ) ->\n    has_base  = false\n    baseclass = @constructor\n    base      = null\n    ### TAINT condition should use API like 'has_property_but_value_isnt_null()' (?name?) ###\n    # if ( Reflect.has dcl, 'base' ) and ( dcl.base isnt null )\n    if dcl.base?\n      unless ( dcl.base instanceof @constructor )\n        ### TAINT use `type_of()` ###\n        throw new Error \"Ωct___2 dcl.base must be instanceof #{rpr @}, got #{rpr dcl.base}\"\n      has_base  = true\n      ### NOTE redundant here but needed when we allow typenames for base ###\n      base      = dcl.base\n      baseclass = dcl.base.constructor\n    return { has_base, base, baseclass, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_kind: ( dcl ) ->\n    kind            = null\n    kind_reason = null\n    #.......................................................................................................\n    hints =\n      acc_to_kind:      if dcl.kind?      then dcl.kind               else null\n      acc_to_fields:    if dcl.fields?    then 'compound'             else 'simple'\n      acc_to_template:  if dcl.template?  then kind_of dcl.template   else null\n      acc_to_base_kind: if dcl.base?      then dcl.base.kind          else null\n    #.......................................................................................................\n    for hint_reason, hint of hints\n      continue unless hint?\n      unless kind?\n        kind        = hint\n        kind_reason = hint_reason\n        continue\n      continue if hint is kind\n      kind_reason = kind_reason.replace /acc_to_/g,  ''\n      kind_reason = kind_reason.replace /_/g,        '.'\n      hint_reason = hint_reason.replace /acc_to_/g,  ''\n      hint_reason = hint_reason.replace /_/g,        '.'\n      throw new E.Cleartype_kind_mismatch_error \"Ωct___3 according to #{dcl.name}.#{kind_reason}, \" + \\\n        \"the kind of #{dcl.name} is #{rpr kind}, but according to #{dcl.name}.#{hint_reason}, \" + \\\n        \"the kind of #{dcl.name} is #{rpr hint}\"\n    #.......................................................................................................\n    return { kind, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_fields: ( dcl ) ->\n    has_fields  = false\n    fields      = Object.create null\n    sources     = []\n    #.......................................................................................................\n    if dcl.has_base and dcl.base.has_fields\n      sources.push dcl.base.fields\n    #.......................................................................................................\n    if dcl.fields?\n      validate gnd.compound, dcl.fields\n      sources.push dcl.fields\n    #.......................................................................................................\n    for source in sources\n      for sub_name, sub_field of ( source ? {} )\n        validate gnd.dcl_field, sub_field\n        has_fields          = true\n        fields[ sub_name ]  = sub_field\n    return { has_fields, fields, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_template: ( dcl ) ->\n    dcl_has_template  = Reflect.has dcl, 'template'\n    base_has_template = dcl.has_base and dcl.base.has_template\n    has_template      = dcl_has_template or base_has_template\n    template          = null\n    get_template      = -> throw new E.Cleartype_notemplate_error \"Ωct___4 type #{dcl.name} doesn't have a template\"\n    #.......................................................................................................\n    switch dcl.kind\n      #.....................................................................................................\n      when 'simple'\n        if dcl_has_template\n          if gnd.function.isa dcl.template\n            template      = dcl.template\n            get_template  = -> template.call @\n          #.......................................................................................................\n          else if gnd.simple.isa dcl.template\n            template      = dcl.template\n            get_template  = -> template\n        else if base_has_template\n          get_template = do -> ( base = dcl.base ) -> base.get_template()\n      #.....................................................................................................\n      when 'compound'\n        template      = Object.create null\n        if base_has_template\n          Object.assign template, base.get_template()...\n        if dcl_has_template\n          ### TAINT this should be done in pre-checks ###\n          validate gnd.pod, dcl.template\n          for field_name, value of dcl.template\n            template[ field_name ] = value\n        null\n      #.....................................................................................................\n      else\n        throw new E.Cleartype_internal_error \"Ωct___5 should never happen: encountered dcl.kind: #{rpr dcl.kind}\"\n    #.......................................................................................................\n    # else if dcl.has_base and dcl.base.has_template\n    #   # debug 'Ωct___8', dcl.name, \"_compile_template\"\n    #   sources.push dcl.base.template\n    # #.......................................................................................................\n    # if dcl.template?\n    #   validate gnd.compound dcl.fields\n    #   sources.push dcl.fields\n    #   if has_base and ( kind isnt true )\n    #     throw new E.Cleartype_kind_mismatch_error \"Ωct___9 type #{dcl.name} is declared as a compound type kind but its base #{base.name} isn't\"\n    #   kind = true\n    # #.......................................................................................................\n    # for source in [ base?.template, dcl.template, ]\n    #   for sub_name, sub_template of ( source ? {} )\n    #     has_template          = true\n    #     producer              = if ( gnd.function.isa sub_template ) then sub_template else \\\n    #       do ( value = sub_template ) -> -> sub_template\n    #     ### TIANT use API call ###\n    #     template[ sub_name ]  = nameit \"create_#{dcl.name}_#{sub_name}\", producer\n    # return { has_template, template, kind, }\n    get_template = nameit ( @_method_name_from_typename 'get_template_for', dcl.name ), get_template\n    return { has_template, template, get_template, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_isa: ( dcl ) ->\n    if ( isa = dcl.isa )?\n      if isa instanceof @constructor\n        isa = do ( other_type = isa ) -> ( x ) -> other_type.isa x\n      validate gnd.function, dcl.isa\n    #.......................................................................................................\n    ### TAINT decomplect logic ###\n    else\n      if dcl.has_fields\n        isa = @_get_isa_for_fields dcl\n      else\n        unless dcl.has_base\n          throw new Error \"Ωct__10 type declaration must have one of 'fields', 'isa' or 'base' properties, got none\"\n        isa = ( x ) -> true\n    #.......................................................................................................\n    if dcl.has_base\n      isa = do ( base = dcl.base, isa ) -> ( x ) -> ( base.isa x ) and ( isa.call @, x )\n    #.......................................................................................................\n    isa = nameit ( @_method_name_from_typename 'isa', dcl.name ), isa\n    return { isa, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_create: ( dcl ) ->\n    create = -> throw new E.Cleartype_nocreate_error \"Ωct__11 unable to create a #{dcl.name}\"\n    if dcl.create?\n      validate gnd.function, dcl.create\n      create = do ( create = dcl.create                       ) -> ( P... ) -> @validate create.call @, P...\n    else if dcl.has_base and ( not dcl.has_fields )\n      create = do ( create = dcl.base.create, base =dcl.base  ) -> ( P... ) -> @validate create.call base, P...\n    ### TAINT provide create when there are fields but no create() ###\n    else if dcl.has_fields\n      debug 'Ωct__12'\n    create = nameit ( @_method_name_from_typename 'create', dcl.name ), create\n    return { create, }\n\n  #=========================================================================================================\n  _get_isa_for_fields: ( dcl ) -> ( x ) ->\n    return false unless x?\n    ### TAINT in the future, should allow extending e.g. lists with fields? ###\n    return false unless gnd.pod.isa x\n    for field_name, subtype of dcl.fields\n      continue if subtype.isa x[ field_name ]\n      ### TAINT use type_of ###\n      rejection = \"expected a #{subtype.name} for field #{rpr field_name}, got #{rpr x[ field_name ]}\"\n      # warn 'Ωct__13', rejection\n      return false\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _classname_from_typename: ( typename = null ) ->\n    R = ( typename ? 'anonymous' )\n    ### TAINT not Unicode-compliant ###\n    return ( R[ 0 ] ).toUpperCase() + R[ 1 .. ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _method_name_from_typename: ( methodname, typename = null ) ->\n    R = ( typename ? '(anonymous)' )\n    return \"#{methodname}_#{typename}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( x ) ->\n    return x if @isa x\n    throw new E.Cleartype_type_validation_error \"Ωct__14 validation error: expected a #{@name}, got a #{type_of x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: nameit 'isa_type', ( x ) -> x instanceof @constructor\n\n#===========================================================================================================\nclass Typespace\n\n  #---------------------------------------------------------------------------------------------------------\n  add_types: ( dcls ) ->\n    ### TAINT name collisions possible ###\n    for typename, dcl of dcls\n      if Reflect.has @, typename\n        throw new Error \"Ωct__15 name collision: type / property #{rpr typename} already declared\"\n      @[ typename ] = type.create typename, dcl\n    return null\n\n#===========================================================================================================\ntype = new Type()\n\n#===========================================================================================================\nmodule.exports = { type_of, Type, Typespace, internals, }\n"
  ]
}