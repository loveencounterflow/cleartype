{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,eAAA,EAAA,0BAAA,EAAA,qBAAA,EAAA,QAAA,EAAA,KAAA,EAAA,oBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;EAEA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,eAFF,EAGE,QAHF,CAAA,GAG4B,OAAA,CAAQ,YAAR,CAH5B;;EAIA,CAAA,CAAE,IAAF,EACE,oBADF,EAEE,qBAFF,EAGE,KAHF,EAIE,IAJF,EAKE,GALF,CAAA,GAK4B,OAAA,CAAQ,WAAR,CAL5B,EANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4DM,kBAAN,MAAA,gBAAA,QAA8B,MAA9B,CAAA;;EACM,6BAAN,MAAA,2BAAA,QAAyC,gBAAzC,CAAA;;EAMG,CAAA,CAAA,CAAA,GAAA,EAAA;WACD,MAAM,CAAC,OAAP,GAAkB,CAAA;EADjB,CAAA;AAnEH",
  "sourcesContent": [
    "\n'use strict'\n\n{ std\n  type_of\n  primitive_types\n  ct_kinds }              = require './builtins'\n{ hide\n  get_instance_methods\n  bind_instance_methods\n  debug\n  help\n  rpr                   } = require './helpers'\n\n###\n\n# from `ltsort` which uses an outdated version of `intertype`:\n\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Cleartype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs      ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n###\n\n#===========================================================================================================\nclass Cleartype_error extends Error\nclass Cleartype_validation_error extends Cleartype_error\n\n\n\n\n#===========================================================================================================\ndo =>\n  module.exports  = {}\n"
  ]
}