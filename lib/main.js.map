{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,wBAAA,EAAA,eAAA,EAAA,0BAAA,EAAA,IAAA,EAAA,SAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA;;;EAGA,CAAA,CAAE,GAAF,EACE,OADF,CAAA,GAC4B,OAAA,CAAQ,YAAR,CAD5B,EAHA;;;;EAMA,CAAA,CAAE,IAAF,EAEE,qBAFF,EAGE,MAHF,EAIE,KAJF,EAKE,IALF,EAME,IANF,EAOE,GAPF,CAAA,GAO4B,OAAA,CAAQ,WAAR,CAP5B,EANA;;;EAiBM,kBAAN,MAAA,gBAAA,QAA8B,MAA9B,CAAA;;EACM,6BAAN,MAAA,2BAAA,QAAyC,gBAAzC,CAAA;;EACM,2BAAN,MAAA,yBAAA,QAAuC,gBAAvC,CAAA,EAnBA;;;EAuBA,QAAA,GAAW,QAAA,CAAE,IAAF,EAAQ,CAAR,CAAA;IACT,IAAY,IAAI,CAAC,GAAL,CAAS,CAAT,CAAZ;AAAA,aAAO,EAAP;;IACA,MAAM,IAAI,0BAAJ,CAA+B,CAAA,iBAAA,CAAA,CAAoB,IAAI,CAAC,IAAzB,CAAA,QAAA,CAAA,CAAwC,OAAA,CAAQ,CAAR,CAAxC,CAAA,CAA/B;EAFG;;EAKL;;IAAN,MAAA,KAAA,CAAA;;MAGE,WAAa,CAAE,MAAM,IAAR,CAAA;QACX,IAAuC,WAAvC;UAAA,MAAM,IAAI,KAAJ,CAAU,mBAAV,EAAN;;QACA,qBAAA,CAAsB,IAAtB;QACA,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,WAAW,CAAC,IAAI,CAAC,WAAlB,CAAA;AACR,eAAO;MAJI,CADf;;;MAQE,MAAQ,CAAE,QAAF,EAAY,GAAZ,CAAA,EAAA;;AACV,YAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,EAAA,YAAA,EAAA;QACI,IAAc,GAAA,YAAe,IAAC,CAAA,WAA9B;;AAAA,iBAAO,IAAP;SADJ;;QAGI,CAAA,CAAE,UAAF,EAAc,MAAd,CAAA,GAAyC,IAAC,CAAA,gBAAD,CAAmB,GAAnB,CAAzC;QACA,CAAA,CAAE,YAAF,EAAgB,IAAhB,EAAsB,SAAtB,CAAA,GAAsC,IAAC,CAAA,mBAAD,CAAsB,GAAtB,CAAtC;QACA,GAAA,GAA4C,IAAC,CAAA,aAAD,CAAgB,GAAhB,EAAqB,CAAE,UAAF,EAAc,YAAd,EAA4B,QAA5B,CAArB,EALhD;;QAOI,KAAA,CAAM,OAAN,EAAe,QAAf,EAAyB,QAAzB,EAAmC,IAAnC,EAAyC,SAAzC;QACA,IAAG,kBAAH;UACE,KAAA,CAAM,OAAN,EAAe,QAAf,EAAyB,QAAzB;UACA,IAAwC,QAAA,KAAY,MAApD;YAAA,KAAA,CAAM,OAAN,EAAe,GAAG,CAAC,MAAM,CAAC,QAAX,CAAA,CAAf,EAAA;;UACA,QAAA,CAAS,GAAG,CAAC,QAAb,EAAuB,GAAG,CAAC,MAA3B;UACA,MAAA,GAAY,CAAA,QAAA,CAAE,MAAF,CAAA;mBAAiC,QAAA,CAAA,GAAE,CAAF,CAAA;qBAAY,IAAC,CAAA,QAAD,CAAU,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAe,GAAA,CAAf,CAAV;YAAZ;UAAjC,CAAA,EAAW,GAAG,CAAC,QAJ7B;;SAAA,MAMK,IAAG,YAAH;UACH,IAAyC,QAAA,KAAY,eAArD;YAAA,KAAA,CAAM,OAAN,EAAe,IAAI,CAAC,MAAM,CAAC,QAAZ,CAAA,CAAf,EAAA;;UACA,MAAA,GAAY,CAAA,QAAA,CAAE,MAAF,CAAA;mBAAgC,QAAA,CAAA,GAAE,CAAF,CAAA;qBAAY,IAAC,CAAA,QAAD,CAAU,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,GAAA,CAAlB,CAAV;YAAZ;UAAhC,CAAA,EAAW,IAAI,CAAC,QAFzB;SAAA,MAAA;UAIH,KAAA,CAAM,OAAN,EAAe,QAAf,EAAyB,QAAzB;UACA,MAAA,GAAS,QAAA,CAAA,CAAA;YAAG,MAAM,IAAI,wBAAJ,CAA6B,CAAA,yBAAA,CAAA,CAA4B,QAA5B,CAAA,CAA7B;UAAT,EALN;;QAOL,MAAA,GAAS,MAAA,CAAS,IAAC,CAAA,0BAAD,CAA4B,QAA5B,EAAsC,QAAtC,CAAT,EAA2D,MAA3D,EArBb;;QAuBI,KAAA;;;mBAAQ,MAAA,QAAc,UAAd,CAAA;;2BACN,IAAA,GAAc;;;2BAEd,GAAA,GAAc;;2BACd,MAAA,GAAc;;2BACd,MAAA,GAAc;;2BACd,UAAA,GAAc;;2BACd,YAAA,GAAc;;;;;QAChB,MAAA,CAAS,IAAC,CAAA,wBAAD,CAA0B,QAA1B,CAAT,EAA+C,KAA/C;AACA,eAAO,IAAI,KAAJ,CAAA;MAjCD,CARV;;;MA4CE,gBAAkB,CAAE,GAAF,CAAA;AACpB,YAAA,MAAA,EAAA,UAAA,EAAA,GAAA,EAAA,QAAA,EAAA;QAAI,UAAA,GAAc;QACd,MAAA,GAAc,MAAM,CAAC,MAAP,CAAc,IAAd;QACd,IAAG,kBAAH;AACE;UAAA,KAAA,mBAAA;;YACE,UAAA,GAA0B;YAC1B,MAAM,CAAE,YAAF,CAAN,GAA0B;UAF5B,CADF;;AAIA,eAAO,CAAE,UAAF,EAAc,MAAd;MAPS,CA5CpB;;;MAsDE,mBAAqB,CAAE,GAAF,CAAA;AACvB,YAAA,IAAA,EAAA,SAAA,EAAA;QAAI,YAAA,GAAgB;QAChB,SAAA,GAAgB,IAAC,CAAA;QACjB,IAAA,GAAU,KAFd;;QAII,IAAG,CAAE,OAAO,CAAC,GAAR,CAAY,GAAZ,EAAiB,SAAjB,CAAF,CAAA,IAAmC,CAAE,GAAG,CAAC,OAAJ,KAAiB,IAAnB,CAAtC;UACE,KAAO,CAAE,GAAG,CAAC,OAAJ,YAAuB,IAAC,CAAA,WAA1B,CAAP;;YAEE,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,GAAA,CAAI,IAAJ,CAAxC,CAAA,MAAA,CAAA,CAAsD,GAAA,CAAI,GAAG,CAAC,OAAR,CAAtD,CAAA,CAAV,EAFR;;UAGA,YAAA,GAAgB;UAChB,IAAA,GAAU,GAAG,CAAC;UACd,SAAA,GAAgB,GAAG,CAAC,OAAO,CAAC,YAN9B;;AAOA,eAAO,CAAE,YAAF,EAAgB,IAAhB,EAAsB,SAAtB;MAZY,CAtDvB;;;MAqEE,aAAe,CAAE,GAAF,EAAO,CAAE,UAAF,EAAc,YAAd,EAA4B,QAA5B,CAAP,CAAA;AACjB,YAAA;QAAI,IAAG,uBAAH;UACE,IAAG,GAAA,YAAe,IAAC,CAAA,WAAnB;YACE,GAAA,GAAS,CAAA,QAAA,CAAE,UAAF,CAAA;qBAAwB,QAAA,CAAE,CAAF,CAAA;uBAAS,UAAU,CAAC,GAAX,CAAe,CAAf;cAAT;YAAxB,CAAA,EAAe,KAD1B;;UAEA,QAAA,CAAS,GAAG,CAAC,QAAb,EAAuB,GAAG,CAAC,GAA3B,EAHF;SAAA,MAAA;;;UAOE,IAAG,UAAH;YACE,GAAA,GAAM,IAAC,CAAA,mBAAD,CAAqB,GAArB,EADR;WAAA,MAAA;YAGE,KAAO,YAAP;cACE,MAAM,IAAI,KAAJ,CAAU,2FAAV,EADR;;YAEA,GAAA,GAAM,QAAA,CAAE,CAAF,CAAA;qBAAS;YAAT,EALR;WAPF;SAAJ;;QAcI,IAAG,YAAH;UACE,GAAA,GAAS,CAAA,QAAA,CAAE,IAAF,EAAsB,GAAtB,CAAA;mBAA+B,QAAA,CAAE,CAAF,CAAA;qBAAS,CAAE,IAAI,CAAC,GAAL,CAAS,CAAT,CAAF,CAAA,IAAmB,CAAE,GAAG,CAAC,IAAJ,CAAS,IAAT,EAAY,CAAZ,CAAF;YAA5B;UAA/B,CAAA,EAAS,GAAG,CAAC,SAAS,KADjC;SAdJ;;AAiBI,eAAO,MAAA,CAAS,IAAC,CAAA,0BAAD,CAA4B,KAA5B,EAAmC,QAAnC,CAAT,EAAwD,GAAxD;MAlBM,CArEjB;;;MA0FE,mBAAqB,CAAE,GAAF,CAAA;eAAW,QAAA,CAAE,CAAF,CAAA,EAAA;;AAClC,cAAA,UAAA,EAAA,GAAA,EAAA,SAAA,EAAA;UAAI,IAAoB,SAApB;AAAA,mBAAO,MAAP;;UAEA,KAAoB,GAAG,CAAC,GAAG,CAAC,GAAR,CAAY,CAAZ,CAApB;;AAAA,mBAAO,MAAP;;AACA;UAAA,KAAA,iBAAA;;YACE,IAAY,OAAO,CAAC,GAAR,CAAY,CAAC,CAAE,UAAF,CAAb,CAAZ;AAAA,uBAAA;;YAEA,SAAA,GAAY,CAAA,WAAA,CAAA,CAAc,OAAO,CAAC,IAAtB,CAAA,WAAA,CAAA,CAAwC,GAAA,CAAI,UAAJ,CAAxC,CAAA,MAAA,CAAA,CAA+D,GAAA,CAAI,CAAC,CAAE,UAAF,CAAL,CAA/D,CAAA;YACZ,IAAA,CAAK,OAAL,EAAc,SAAd;AACA,mBAAO;UALT;AAMA,iBAAO;QAVuB;MAAX,CA1FvB;;;MAuGE,wBAA0B,CAAE,WAAW,IAAb,CAAA;AAC5B,YAAA;QAAI,CAAA,sBAAM,WAAW,YAArB;;AAEI,eAAS,CAAC,CAAE,CAAF,CAAO,CAAC,WAAX,CAAA,CAAA,GAA2B,CAAC;MAHX,CAvG5B;;;MA6GE,0BAA4B,CAAE,UAAF,EAAc,WAAW,IAAzB,CAAA;AAC9B,YAAA;QAAI,CAAA,sBAAM,WAAW;AACjB,eAAO,CAAA,CAAA,CAAG,UAAH,CAAA,CAAA,CAAA,CAAiB,QAAjB,CAAA;MAFmB,CA7G9B;;;MAkHE,QAAU,CAAE,CAAF,CAAA;QACR,IAAY,IAAC,CAAA,GAAD,CAAK,CAAL,CAAZ;AAAA,iBAAO,EAAP;;QACA,KAAA,CAAM,OAAN,EAAe,IAAf;QACA,MAAM,IAAI,0BAAJ,CAA+B,CAAA,mCAAA,CAAA,CAAsC,IAAC,CAAA,IAAvC,CAAA,QAAA,CAAA,CAAsD,OAAA,CAAQ,CAAR,CAAtD,CAAA,CAA/B;MAHE;;IApHZ;;;mBA0HE,GAAA,GAAK,MAAA,CAAO,UAAP,EAAmB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,YAAa,IAAC,CAAA;IAAvB,CAAnB;;;;gBAtJP;;;EAyJM,YAAN,MAAA,UAAA,CAAA;;IAGE,SAAW,CAAE,IAAF,CAAA;AACb,UAAA,GAAA,EAAA,QAAA;;MACI,KAAA,gBAAA;;QACE,IAAG,OAAO,CAAC,GAAR,CAAY,IAAZ,EAAe,QAAf,CAAH;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,sCAAA,CAAA,CAAyC,GAAA,CAAI,QAAJ,CAAzC,CAAA,iBAAA,CAAV,EADR;;QAEA,IAAC,CAAE,QAAF,CAAD,GAAgB,IAAI,CAAC,MAAL,CAAY,QAAZ,EAAsB,GAAtB;MAHlB;AAIA,aAAO;IANE;;EAHb,EAzJA;;;EAqKA,IAAA,GAAY,IAAI,IAAJ,CAAA;;EACZ,GAAA,GAAY,IAAI,SAAJ,CAAA,EAtKZ;;;EAyKA,GAAG,CAAC,SAAJ,CAEE,CAAA;;IAAA,IAAA,EACE;MAAA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC,CAAV;;MAEA,MAAA,EAAU,QAAA,CAAE,CAAF,CAAA;QAAgB,IAAK,SAAS,CAAC,MAAV,KAAoB,CAAzB;iBAAkC,GAAlC;SAAA,MAAA;iBAA0C,EAA1C;;MAAhB;IAFV,CADF;;IAKA,KAAA,EACE;MAAA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,QAAP,CAAgB,CAAhB;MAAT,CAAV;MACA,MAAA,EAAU,QAAA,CAAE,IAAI,CAAN,CAAA;QAAa,IAAG,sCAAH;iBAAa,UAAA,CAAW,CAAX,EAAb;SAAA,MAAA;iBAAiC,EAAjC;;MAAb;IADV,CANF;;IASA,OAAA,EACE;MAAA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,SAAP,CAAiB,CAAjB;MAAT,CAAV;MACA,MAAA,EAAU,QAAA,CAAE,IAAI,CAAN,CAAA;QAAa,IAAG,sCAAH;iBAAa,QAAA,CAAS,CAAT,EAAY,EAAZ,EAAb;SAAA,MAAA;iBAAmC,EAAnC;;MAAb;IADV;EAVF,CAFF,EAzKA;;;EAwLA,GAAG,CAAC,SAAJ,CAQE,CAAA;;;;;;;;IAAA,aAAA,EACE;MAAA,OAAA,EAAU,GAAG,CAAC,IAAd;;MAEA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAC,CAAC,MAAF,KAAc;MAAvB;IAFV,CADF;;IAKA,UAAA,EACE;MAAA,OAAA,EAAU,GAAG,CAAC;IAAd;EANF,CARF,EAxLA;;;;EAyMA,GAAG,CAAC,SAAJ,CAEE,CAAA;;IAAA,UAAA,EACE;MAAA,OAAA,EAAU,GAAG,CAAC;IAAd;EADF,CAFF,EAzMA;;;EA8MA,GAAG,CAAC,SAAJ,CAEE,CAAA;;IAAA,QAAA,EACE;MAAA,MAAA,EAAU,QAAA,CAAE,GAAF,CAAA;eAAW;UAAE,CAAA,EAAG,CAAL;UAAQ,CAAA,EAAG,GAAX;UAAgB,GAAA;QAAhB;MAAX,CAAV;MACA,MAAA,EACE;QAAA,CAAA,EAAQ,GAAG,CAAC,UAAZ;QACA,CAAA,EAAQ,GAAG,CAAC;MADZ;IAFF;EADF,CAFF,EA9MA;;;EAwNA,MAAM,CAAC,OAAP,GAAiB,CAAE,GAAF,EAAO,OAAP,EAAgB,IAAhB,EAAsB,SAAtB;AAxNjB",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n{ gnd\n  type_of               } = require './builtins'\n#-----------------------------------------------------------------------------------------------------------\n{ hide\n  # get_instance_methods\n  bind_instance_methods\n  nameit\n  debug\n  warn\n  help\n  rpr                   } = require './helpers'\n\n\n#===========================================================================================================\nclass Cleartype_error extends Error\nclass Cleartype_validation_error extends Cleartype_error\nclass Cleartype_creation_error extends Cleartype_error\n\n\n#===========================================================================================================\nvalidate = ( type, x ) ->\n  return x if type.isa x\n  throw new Cleartype_validation_error \"Ω___1 expected a #{type.name}, got a #{type_of x}\"\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( dcl = null ) ->\n    throw new Error \"Ω___2 not allowed\" if dcl?\n    bind_instance_methods @\n    @name = @constructor.name.toLowerCase()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( typename, dcl ) ->\n    ### TAINT should wrap b/c of names? ###\n    return dcl if dcl instanceof @constructor\n    #.......................................................................................................\n    { has_fields, fields,             } =    @_fields_from_dcl  dcl\n    { is_extension, base, baseclass,  } = @_extension_from_dcl  dcl\n    isa                                 =       @_isa_from_dcl  dcl, { has_fields, is_extension, typename, }\n    #.......................................................................................................\n    debug 'Ω___3', 'create', typename, base, baseclass\n    if dcl.create?\n      debug 'Ω___4', 'create', typename\n      debug 'Ω___5', dcl.create.toString() if typename is 'text'\n      validate gnd.function, dcl.create\n      create = do ( create = dcl.create       ) -> ( P... ) -> @validate create.call @, P...\n    ### TAINT this must be properly resolved (with inheritance?) ###\n    else if is_extension\n      debug 'Ω___6', base.create.toString() if typename is 'nonempty_text'\n      create = do ( create = base.create     ) -> ( P... ) -> @validate create.call base, P...\n    else\n      debug 'Ω___7', 'create', typename\n      create = -> throw new Cleartype_creation_error \"Ω___8 unable to create a #{typename}\"\n    ### TAINT provide create when there are fields but no create() ###\n    create = nameit ( @_method_name_from_typename 'create', typename ), create\n    #.......................................................................................................\n    clasz = class extends baseclass\n      name:         typename\n      # refines:      dcl.refines\n      isa:          isa\n      create:       create\n      fields:       fields\n      has_fields:   has_fields\n      is_extension: is_extension\n    nameit ( @_classname_from_typename typename ), clasz\n    return new clasz()\n\n  #---------------------------------------------------------------------------------------------------------\n  _fields_from_dcl: ( dcl ) ->\n    has_fields  = false\n    fields      = Object.create null\n    if dcl.fields?\n      for sub_typename, sub_type of dcl.fields\n        has_fields              = true\n        fields[ sub_typename ]  = sub_type\n    return { has_fields, fields, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _extension_from_dcl: ( dcl ) ->\n    is_extension  = false\n    baseclass     = @constructor\n    base    = null\n    ### TAINT condition should use API like 'has_property_but_value_isnt_null()' (?name?) ###\n    if ( Reflect.has dcl, 'refines' ) and ( dcl.refines isnt null )\n      unless ( dcl.refines instanceof @constructor )\n        ### TAINT use `type_of()` ###\n        throw new Error \"Ω___9 dcl.refines must be instanceof #{rpr @}, got #{rpr dcl.refines}\"\n      is_extension  = true\n      base    = dcl.refines\n      baseclass     = dcl.refines.constructor\n    return { is_extension, base, baseclass, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa_from_dcl: ( dcl, { has_fields, is_extension, typename, } ) ->\n    if ( isa = dcl.isa )?\n      if isa instanceof @constructor\n        isa = do ( other_type = isa ) -> ( x ) -> other_type.isa x\n      validate gnd.function, dcl.isa\n    #.......................................................................................................\n    ### TAINT decomplect logic ###\n    else\n      if has_fields\n        isa = @_get_isa_for_fields dcl\n      else\n        unless is_extension\n          throw new Error \"Ω__10 type declaration must have one of 'fields', 'isa' or 'refines' properties, got none\"\n        isa = ( x ) -> true\n    #.......................................................................................................\n    if is_extension\n      isa = do ( base = dcl.refines, isa ) -> ( x ) -> ( base.isa x ) and ( isa.call @, x )\n    #.......................................................................................................\n    return nameit ( @_method_name_from_typename 'isa', typename ), isa\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_isa_for_fields: ( dcl ) -> ( x ) ->\n    return false unless x?\n    ### TAINT in the future, should allow extending e.g. lists with fields? ###\n    return false unless gnd.pod.isa x\n    for field_name, subtype of dcl.fields\n      continue if subtype.isa x[ field_name ]\n      ### TAINT use type_of ###\n      rejection = \"expected a #{subtype.name} for field #{rpr field_name}, got #{rpr x[ field_name ]}\"\n      warn 'Ω__11', rejection\n      return false\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _classname_from_typename: ( typename = null ) ->\n    R = ( typename ? 'anonymous' )\n    ### TAINT not Unicode-compliant ###\n    return ( R[ 0 ] ).toUpperCase() + R[ 1 .. ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _method_name_from_typename: ( methodname, typename = null ) ->\n    R = ( typename ? '(anonymous)' )\n    return \"#{methodname}_#{typename}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( x ) ->\n    return x if @isa x\n    debug 'Ω__12', @\n    throw new Cleartype_validation_error \"Ω__13 validation error: expected a #{@name}, got a #{type_of x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: nameit 'isa_type', ( x ) -> x instanceof @constructor\n\n#===========================================================================================================\nclass Typespace\n\n  #---------------------------------------------------------------------------------------------------------\n  add_types: ( dcls ) ->\n    ### TAINT name collisions possible ###\n    for typename, dcl of dcls\n      if Reflect.has @, typename\n        throw new Error \"Ω__14 name collision: type / property #{rpr typename} already declared\"\n      @[ typename ] = type.create typename, dcl\n    return null\n\n#===========================================================================================================\ntype      = new Type()\nstd       = new Typespace()\n\n#===========================================================================================================\nstd.add_types\n  #.........................................................................................................\n  text:\n    isa:      ( x ) -> ( Object::toString.call x ) is '[object String]'\n    ### NOTE just returning argument which will be validated; only strings pass so `create value` is a no-op / validation only ###\n    create:   ( x ) -> return if ( arguments.length is 0 ) then '' else x\n  #.........................................................................................................\n  float:\n    isa:      ( x ) -> Number.isFinite x\n    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #.........................................................................................................\n  integer:\n    isa:      ( x ) -> Number.isInteger x\n    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  ###\n  nonempty_text:\n    isa:      std.text\n    refine:   ( x ) -> ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  ###\n  #.........................................................................................................\n  nonempty_text:\n    refines:  std.text\n    # isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )\n    isa:      ( x ) -> x.length isnt 0\n  #.........................................................................................................\n  quantity_q:\n    refines:  std.float\n    # isa: std.float.isa\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity_u:\n    refines:  std.nonempty_text\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity:\n    create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n\n\n#===========================================================================================================\nmodule.exports = { std, type_of, Type, Typespace, }\n\n"
  ]
}