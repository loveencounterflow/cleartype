{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n{ gnd\n  type_of               } = require './builtins'\n#-----------------------------------------------------------------------------------------------------------\n{ hide\n  # get_instance_methods\n  bind_instance_methods\n  nameit\n  debug\n  warn\n  help\n  rpr                   } = require './helpers'\n\n\n#===========================================================================================================\ninternals = new class Internals then constructor: ->\n  @gnd  = gnd\n  return undefined\n\n#===========================================================================================================\nclass Cleartype_error extends Error\nclass Cleartype_arguments_not_allowed_error extends Cleartype_error\nclass Cleartype_validation_error extends Cleartype_error\nclass Cleartype_creation_error extends Cleartype_error\n\n\n#===========================================================================================================\nvalidate = ( type, x ) ->\n  return x if type.isa x\n  throw new Cleartype_validation_error \"Î©___1 expected a #{type.name}, got a #{type_of x}\"\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    throw new Cleartype_arguments_not_allowed_error \"Î©___2 arguments not allowed\" if arguments.length isnt 0\n    bind_instance_methods @\n    hide @, 'name', @constructor.name.toLowerCase()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( typename, dcl ) ->\n    ### TAINT should wrap b/c of names? ###\n    return dcl if dcl instanceof @constructor\n    #.......................................................................................................\n    { is_extension, base, baseclass,  } = @_extension_from_dcl  dcl\n    { has_fields, fields,             } =    @_compile_fields { typename, dcl, base, }\n    { has_template, template,         } =  @_compile_template { typename, dcl, base, fields, }\n    isa                                 =       @_isa_from_dcl  dcl, { has_fields, is_extension, typename, }\n    #.......................................................................................................\n    create = -> throw new Cleartype_creation_error \"Î©___8 unable to create a #{typename}\"\n    if dcl.create?\n      validate gnd.function, dcl.create\n      create = do ( create = dcl.create       ) -> ( P... ) -> @validate create.call @, P...\n    else if is_extension and ( not has_fields )\n      create = do ( create = base.create     ) -> ( P... ) -> @validate create.call base, P...\n    ### TAINT provide create when there are fields but no create() ###\n    else if has_fields\n      debug 'Î©__10'\n    create = nameit ( @_method_name_from_typename 'create', typename ), create\n    #.......................................................................................................\n    ### TAINT should we differentiate instance properties from prototype methods? ###\n    clasz = class extends baseclass\n      #.....................................................................................................\n      constructor: ( P... ) ->\n        super P...\n        hide @, 'name',         typename\n        hide @, 'base',         dcl.base\n        hide @, 'fields',       fields\n        hide @, 'template',     template\n        hide @, 'has_fields',   has_fields\n        hide @, 'has_template', has_template\n        hide @, 'is_extension', is_extension\n        return undefined\n      #.....................................................................................................\n      isa:          isa\n      create:       create\n    nameit ( @_classname_from_typename typename ), clasz\n    return new clasz()\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_fields: ({ typename, dcl, base, }) ->\n    has_fields  = false\n    fields      = Object.create null\n    ### TAINT missing validate gnd.pod, fields ###\n    for source in [ base?.fields, dcl.fields, ]\n      for sub_name, sub_field of ( source ? {} )\n        has_fields          = true\n        fields[ sub_name ]  = sub_field\n    return { has_fields, fields, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_template: ({ typename, dcl, base, fields, }) ->\n    has_template  = false\n    template      = Object.create null\n    ### TAINT missing validate gnd.pod, template ###\n    for source in [ base?.template, dcl.template, ]\n      for sub_name, sub_template of ( source ? {} )\n        has_template          = true\n        producer              = if ( gnd.function.isa sub_template ) then sub_template else \\\n          do ( value = sub_template ) -> -> sub_template\n        ### TIANT use API call ###\n        template[ sub_name ]  = nameit \"create_#{typename}_#{sub_name}\", producer\n    return { has_template, template, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _extension_from_dcl: ( dcl ) ->\n    is_extension  = false\n    baseclass     = @constructor\n    base    = null\n    ### TAINT condition should use API like 'has_property_but_value_isnt_null()' (?name?) ###\n    if ( Reflect.has dcl, 'base' ) and ( dcl.base isnt null )\n      unless ( dcl.base instanceof @constructor )\n        ### TAINT use `type_of()` ###\n        throw new Error \"Î©___9 dcl.base must be instanceof #{rpr @}, got #{rpr dcl.base}\"\n      is_extension  = true\n      base    = dcl.base\n      baseclass     = dcl.base.constructor\n    return { is_extension, base, baseclass, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa_from_dcl: ( dcl, { has_fields, is_extension, typename, } ) ->\n    if ( isa = dcl.isa )?\n      if isa instanceof @constructor\n        isa = do ( other_type = isa ) -> ( x ) -> other_type.isa x\n      validate gnd.function, dcl.isa\n    #.......................................................................................................\n    ### TAINT decomplect logic ###\n    else\n      if has_fields\n        isa = @_get_isa_for_fields dcl\n      else\n        unless is_extension\n          throw new Error \"Î©__10 type declaration must have one of 'fields', 'isa' or 'base' properties, got none\"\n        isa = ( x ) -> true\n    #.......................................................................................................\n    if is_extension\n      isa = do ( base = dcl.base, isa ) -> ( x ) -> ( base.isa x ) and ( isa.call @, x )\n    #.......................................................................................................\n    return nameit ( @_method_name_from_typename 'isa', typename ), isa\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_isa_for_fields: ( dcl ) -> ( x ) ->\n    return false unless x?\n    ### TAINT in the future, should allow extending e.g. lists with fields? ###\n    return false unless gnd.pod.isa x\n    for field_name, subtype of dcl.fields\n      continue if subtype.isa x[ field_name ]\n      ### TAINT use type_of ###\n      rejection = \"expected a #{subtype.name} for field #{rpr field_name}, got #{rpr x[ field_name ]}\"\n      # warn 'Î©__11', rejection\n      return false\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _classname_from_typename: ( typename = null ) ->\n    R = ( typename ? 'anonymous' )\n    ### TAINT not Unicode-compliant ###\n    return ( R[ 0 ] ).toUpperCase() + R[ 1 .. ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _method_name_from_typename: ( methodname, typename = null ) ->\n    R = ( typename ? '(anonymous)' )\n    return \"#{methodname}_#{typename}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( x ) ->\n    return x if @isa x\n    throw new Cleartype_validation_error \"Î©__13 validation error: expected a #{@name}, got a #{type_of x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: nameit 'isa_type', ( x ) -> x instanceof @constructor\n\n#===========================================================================================================\nclass Typespace\n\n  #---------------------------------------------------------------------------------------------------------\n  add_types: ( dcls ) ->\n    ### TAINT name collisions possible ###\n    for typename, dcl of dcls\n      if Reflect.has @, typename\n        throw new Error \"Î©__14 name collision: type / property #{rpr typename} already declared\"\n      @[ typename ] = type.create typename, dcl\n    return null\n\n#===========================================================================================================\ntype      = new Type()\nstd       = new Typespace()\n\n#===========================================================================================================\nstd.add_types\n  #.........................................................................................................\n  text:\n    isa:      ( x ) -> ( typeof x ) is 'string' # ( Object::toString.call x ) is '[object String]'\n    ### NOTE just returning argument which will be validated; only strings pass so `create value` is a no-op / validation only ###\n    create:   ( x ) -> return if ( arguments.length is 0 ) then '' else x\n  #.........................................................................................................\n  float:\n    isa:      ( x ) -> Number.isFinite x\n    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #.........................................................................................................\n  integer:\n    isa:      ( x ) -> Number.isInteger x\n    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n    template: 0\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  ###\n  nonempty_text:\n    isa:      std.text\n    refine:   ( x ) -> ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  ###\n  #.........................................................................................................\n  nonempty_text:\n    base:  std.text\n    # isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )\n    isa:      ( x ) -> x.length isnt 0\n  #.........................................................................................................\n  quantity_q:\n    base:  std.float\n    # isa: std.float.isa\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity_u:\n    base:  std.nonempty_text\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity:\n    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n  #.........................................................................................................\n  quantity_with_template:\n    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n    template:\n      q:      'u'\n\n#===========================================================================================================\nmodule.exports = { std, type_of, Type, Typespace, internals, }\n\n"
  ]
}