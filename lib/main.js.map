{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,SAAA,EAAA,eAAA,EAAA,0BAAA,EAAA,cAAA,EAAA,EAAA,EAAA,QAAA,EAAA,KAAA,EAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA;;EAEA,CAAA,CAAE,KAAF,EACE,IADF,CAAA,GAC4B,OAD5B;;EAEA,GAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,OAAA,CAAQ,OAAR,CAAF,CAAmB,CAAC,OAApB,CAA4B,CAA5B;EAAT;;EAC5B,CAAA,CAAE,cAAF,EACE,OADF,EAEE,eAFF,EAGE,QAHF,CAAA,GAG4B,OAAA,CAAQ,YAAR,CAH5B,EALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyDM,kBAAN,MAAA,gBAAA,QAA8B,MAA9B,CAAA;;EACM,6BAAN,MAAA,2BAAA,QAAyC,gBAAzC,CAAA;;EAIM;;IAAN,MAAA,UAAA,CAAA;;MAGE,WAAa,CAAA,CAAA;QACX,IAAC,CAAA,SAAD,GAAgB,KAAH,GAAc,IAAI,OAAJ,CAAA,CAAd,GAAiC,IAAI,GAAI,wDAAR,CAAA;AAC9C,eAAO;MAFI,CADf;;;MAME,QAAU,CAAE,IAAF,CAAA;AACZ,YAAA;QAAI,IAAsC,sCAAtC;AAAA,iBAAO,CAAE,CAAA,GAAI,IAAC,CAAA,SAAS,CAAC,GAAX,CAAe,IAAf,CAAN,EAAP;;QACA,IAAC,CAAA,SAAS,CAAC,GAAX,CAAe,IAAf,EAAqB,CAAA,GAAI,MAAM,CAAC,MAAP,CAAc;UAAE,EAAA,EAAI,IAAN;UAAY,KAAA,EAAO;QAAnB,CAAd,CAAzB;AACA,eAAO;MAHC,CANZ;;;MAYE,GAAK,CAAE,IAAF,EAAQ,CAAR,CAAA;AACH,eAAO,IAAI,CAAC,IAAI,CAAC,IAAV,CAAiB,IAAC,CAAA,QAAD,CAAU,IAAV,CAAjB,EAAmC,CAAnC;MADJ,CAZP;;;MAgBE,YAAc,CAAE,IAAF,EAAQ,CAAR,CAAA;eAAe,CAAM,SAAN,CAAA,IAAc,CAAE,IAAC,CAAA,GAAD,CAAK,IAAL,EAAW,CAAX,CAAF;MAA7B,CAhBhB;;;MAmBE,QAAU,CAAE,IAAF,EAAQ,CAAR,CAAA;QACR,IAAY,IAAC,CAAA,GAAD,CAAK,IAAL,EAAW,CAAX,CAAZ;AAAA,iBAAO,EAAP;;QACA,MAAM,IAAI,0BAAJ,CAA+B,CAAA,2BAAA,CAAA,CAA8B,GAAA,CAAI,IAAJ,CAA9B,CAAA,EAAA,CAAA,CAA2C,GAAA,CAAI,CAAJ,CAA3C,CAAA,CAA/B;MAFE,CAnBZ;;;MAwBE,iBAAmB,CAAE,IAAF,EAAQ,CAAR,CAAA;QACjB,IAAY,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB,CAApB,CAAZ;AAAA,iBAAO,EAAP;;QACA,MAAM,IAAI,0BAAJ,CAA+B,CAAA,2BAAA,CAAA,CAA8B,GAAA,CAAI,IAAJ,CAA9B,CAAA,EAAA,CAAA,CAA2C,GAAA,CAAI,CAAJ,CAA3C,CAAA,CAA/B;MAFW,CAxBrB;;;MA6BE,MAAQ,CAAE,IAAF,EAAA,GAAQ,CAAR,CAAA;AACN,eAAO,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,IAAI,CAAC,OAAO,CAAC,IAAb,CAAoB,IAAC,CAAA,QAAD,CAAU,IAAV,CAApB,EAAsC,GAAA,CAAtC,CAAhB;MADD;;IA/BV;;;wBAmCE,OAAA,GAAS;;;;gBAjGX;;;EAoGA,EAAA,GAAK,IAAI,SAAJ,CAAA,EApGL;;;;;;;;;;;;;;;;EAsHA,MAAM,CAAC,OAAP,GAAiB,CAAE,SAAF,EAAa,EAAb,EAAiB,cAAjB;AAtHjB",
  "sourcesContent": [
    "\n'use strict'\n\n{ debug\n  help    }               = console\nrpr                       = ( x ) -> ( require 'loupe' ).inspect x\n{ TMP_typespace1\n  type_of\n  primitive_types\n  ct_kinds }              = require './builtins'\n\n###\n\n# from `ltsort` which uses an outdated version of `intertype`:\n\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Cleartype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs      ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n###\n\n#===========================================================================================================\nclass Cleartype_error extends Error\nclass Cleartype_validation_error extends Cleartype_error\n\n\n#===========================================================================================================\nclass Cleartype\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @_contexts = if false then new WeakMap() else new Map ### TAINT this is going to be configurable for testing ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_ctx: ( type ) ->\n    return ( R = @_contexts.get type ) if R?\n    @_contexts.set type, R = Object.freeze { me: type, types: @, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: ( type, x ) ->\n    return type.$isa.call ( @_get_ctx type ), x\n\n  #---------------------------------------------------------------------------------------------------------\n  isa_optional: ( type, x ) -> ( not x? ) or ( @isa type, x )\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( type, x ) ->\n    return x if @isa type, x\n    throw new Cleartype_validation_error \"Ωpmi___1 validation error\\n#{rpr type}\\n#{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate_optional: ( type, x ) ->\n    return x if @isa_optional type, x\n    throw new Cleartype_validation_error \"Ωpmi___2 validation error\\n#{rpr type}\\n#{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( type, P... ) ->\n    return @validate type, type.$create.call ( @_get_ctx type ), P...\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: type_of\n\n#===========================================================================================================\nct = new Cleartype()\n\n\n# #===========================================================================================================\n# class Type\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( declaration ) ->\n#     @$isa     = declaration.$isa\n#     @$create  = declaration.$create\n#     return undefined\n\n#   # #---------------------------------------------------------------------------------------------------------\n#   # $isa: ->\n#   # $create: ->\n\n\n#===========================================================================================================\nmodule.exports = { Cleartype, ct, TMP_typespace1, }\n"
  ]
}