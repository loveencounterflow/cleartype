{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n{ # std\n  type_of               } = require './builtins'\n#-----------------------------------------------------------------------------------------------------------\n{ hide\n  # get_instance_methods\n  # bind_instance_methods\n  nameit\n  debug\n  warn\n  help\n  rpr                   } = require './helpers'\n\n\n#===========================================================================================================\nclass Cleartype_error extends Error\nclass Cleartype_validation_error extends Cleartype_error\n\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( dcl = null ) ->\n    throw new Error \"Ω___1 not allowed\" if dcl?\n    # H.bind_instance_methods @\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( typename, dcl ) -> @constructor.from_declaration dcl\n\n  #---------------------------------------------------------------------------------------------------------\n  @from_declaration: ( typename, dcl ) ->\n    ### TAINT should wrap b/c of names? ###\n    return dcl if dcl instanceof @\n    #.......................................................................................................\n    { has_fields, fields, } = @_fields_from_dcl_fields dcl.fields ? null\n    #.......................................................................................................\n    ### TAINT condition should use API like 'has_property_but_value_isnt_null()' (?name?) ###\n    if ( Reflect.has dcl, 'refines' ) and ( dcl.refines isnt null )\n      unless ( dcl.refines instanceof @ )\n        ### TAINT use `type_of()` ###\n        throw new Error \"Ω___2 dcl.refines must be instanceof #{rpr @}, got #{rpr dcl.refines}\"\n      is_extension  = true\n      extension     = dcl.refines.constructor\n    else\n      is_extension  = false\n      extension     = @\n    #.......................................................................................................\n    if dcl.isa?\n      switch true\n        when dcl.isa instanceof @\n          per_se_isa = do ( isa = dcl.isa.isa ) -> ( x ) -> isa x\n        when ( Object::toString.call dcl.isa ) is '[object Function]'\n          per_se_isa = dcl.isa\n        else throw new Error 'Ω___3'\n    #.......................................................................................................\n    ### TAINT decomplect logic ###\n    else\n      if has_fields\n        per_se_isa = ( x ) ->\n          return false unless x?\n          return false unless x.constructor in [ Object, undefined, ] ### stad.pod.isa x ###\n          for field_name, subtype of dcl.fields\n            continue if subtype.isa x[ field_name ]\n            ### TAINT use type_of ###\n            rejection = \"expected a #{subtype.name} for field #{rpr field_name}, got #{rpr x[ field_name ]}\"\n            warn 'Ω___4', rejection\n            return false\n          return true\n      else\n        unless is_extension\n          throw new Error \"Ω___1 type declaration must have one of 'fields', 'isa' or 'refines' properties, got none\"\n        per_se_isa = ( x ) -> true\n    #.......................................................................................................\n    if is_extension\n      ### TAINT review use of dcl.refines here ###\n      debug 'Ωcltt___5', typename, dcl.refines, dcl.refines.isa\n      isa = ( x ) -> ( dcl.refines.isa x ) and ( per_se_isa x )\n    else\n      isa = per_se_isa\n    #.......................................................................................................\n    create = dcl.create ? ( x ) -> x\n    # if dcl.create?\n    #   create = ( x ) -> dcl.create x\n    # else\n    #   ### TAINT check whether there are fields ###\n    #   fields = {}\n    #   for field_name, dsc of Object.getOwnPropertyDescriptors dcl\n    #.......................................................................................................\n    clasz = class extends extension\n      name:         typename\n      isa:          nameit ( @isaname_from_typename typename ), isa\n      create:       create\n      fields:       fields\n      has_fields:   has_fields\n    nameit ( clasz.classname_from_typename typename ), clasz\n    return new clasz()\n\n  #---------------------------------------------------------------------------------------------------------\n  @_fields_from_dcl_fields: ( dcl_fields = null ) ->\n    has_fields  = false\n    fields      = Object.create null\n    if dcl_fields?\n      for sub_typename, sub_type of dcl_fields\n        has_fields              = true\n        fields[ sub_typename ]  = sub_type\n    return { has_fields, fields, }\n\n  #---------------------------------------------------------------------------------------------------------\n  @classname_from_typename = ( typename = null ) ->\n    R = ( typename ? 'anonymous' )\n    ### TAINT not Unicode-compliant ###\n    return ( R[ 0 ] ).toUpperCase() + R[ 1 .. ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @isaname_from_typename = ( typename = null ) ->\n    R = ( typename ? 'anonymous' )\n    return \"isa_#{typename}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( x ) ->\n    return x if @isa x\n    throw new Error \"Ω___6 Cleartype_validation_error\"\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: ( x ) -> x instanceof @constructor\n\n#===========================================================================================================\nclass Typespace\n\n  #---------------------------------------------------------------------------------------------------------\n  add_types: ( dcls ) ->\n    ### TAINT name collisions possible ###\n    for typename, dcl of dcls\n      if Reflect.has @, typename\n        throw new Error \"Ω___7 name collision: type / property #{rpr typename} already declared\"\n      @[ typename ] = Type.from_declaration typename, dcl\n    return null\n\n#===========================================================================================================\n# type  = new Type()\nstd   = new Typespace()\n\n#===========================================================================================================\nstd.add_types\n  #.........................................................................................................\n  text:\n    isa:      ( x ) -> ( Object::toString.call x ) is '[object String]'\n    create:   ( x ) -> x?.toString() ? ''\n  #.........................................................................................................\n  float:\n    isa:      ( x ) -> Number.isFinite x\n    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #.........................................................................................................\n  integer:\n    isa:      ( x ) -> Number.isInteger x\n    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  ###\n  nonempty_text:\n    isa:      std.text\n    refine:   ( x ) -> ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  ###\n  #.........................................................................................................\n  nonempty_text:\n    refines:  std.text\n    # isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )\n    isa:      ( x ) -> ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  #.........................................................................................................\n  quantity_q:\n    refines:  std.float\n    # isa: std.float.isa\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity_u:\n    refines:  std.nonempty_text\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity:\n    create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n\n\n#===========================================================================================================\nmodule.exports = { std, type_of, Type, Typespace, }\n"
  ]
}