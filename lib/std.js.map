{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/std.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n{ gnd\n  kind_of\n  type_of               } = require './builtins'\n#-----------------------------------------------------------------------------------------------------------\n{ hide\n  # get_instance_methods\n  bind_instance_methods\n  nameit\n  debug\n  warn\n  help\n  rpr                   } = require './helpers'\n#-----------------------------------------------------------------------------------------------------------\n{ Type\n  Typespace             } = require './main'\n\n#===========================================================================================================\nstd = new Typespace()\n\n#===========================================================================================================\nstd.add_types\n  #.........................................................................................................\n  text:\n    isa:      ( x ) -> ( typeof x ) is 'string' # ( Object::toString.call x ) is '[object String]'\n    ### NOTE just returning argument which will be validated; only strings pass so `create value` is a no-op / validation only ###\n    create:   ( x ) -> return if ( arguments.length is 0 ) then '' else x\n    template: ''\n  #.........................................................................................................\n  float:\n    isa:      ( x ) -> Number.isFinite x\n    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #.........................................................................................................\n  integer:\n    isa:      ( x ) -> Number.isInteger x\n    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n    template: 0\n  #.........................................................................................................\n  list:\n    isa:      ( x ) -> Array.isArray x\n    # create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n    template: -> []\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  ###\n  nonempty_text:\n    isa:      std.text\n    refine:   ( x ) -> ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  ###\n  #.........................................................................................................\n  nonempty_text:\n    base:  std.text\n    # isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )\n    isa:      ( x ) -> x.length isnt 0\n  #.........................................................................................................\n  quantity_q:\n    base:  std.float\n    # isa: std.float.isa\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity_u:\n    base:  std.nonempty_text\n#-----------------------------------------------------------------------------------------------------------\nstd.add_types\n  #.........................................................................................................\n  quantity:\n    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n  #.........................................................................................................\n  quantity_with_template:\n    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:      std.quantity_q\n      u:      std.quantity_u\n    template:\n      q:      'u'\n\n#===========================================================================================================\nmodule.exports = { std, }\n"
  ]
}