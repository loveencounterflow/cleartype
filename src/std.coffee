
'use strict'

#===========================================================================================================
{ gnd
  kind_of
  type_of               } = require './builtins'
#-----------------------------------------------------------------------------------------------------------
{ hide
  # get_instance_methods
  bind_instance_methods
  nameit
  debug
  warn
  help
  rpr                   } = require './helpers'
#-----------------------------------------------------------------------------------------------------------
{ Type
  Typespace             } = require './main'

#===========================================================================================================
std = new Typespace()

#===========================================================================================================
std.add_types
  #.........................................................................................................
  text:
    isa:      ( x ) -> ( typeof x ) is 'string' # ( Object::toString.call x ) is '[object String]'
    ### NOTE just returning argument which will be validated; only strings pass so `create value` is a no-op / validation only ###
    create:   ( x ) -> return if ( arguments.length is 0 ) then '' else x
    template: ''
  #.........................................................................................................
  float:
    isa:      ( x ) -> Number.isFinite x
    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0
  #.........................................................................................................
  integer:
    isa:      ( x ) -> Number.isInteger x
    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0
    template: 0
  #.........................................................................................................
  list:
    isa:      ( x ) -> Array.isArray x
    # create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0
    template: -> []
#-----------------------------------------------------------------------------------------------------------
std.add_types
  ###
  nonempty_text:
    isa:      std.text
    refine:   ( x ) -> ( x.length isnt 0 )
    create:   ( x ) -> x?.toString() ? ''
  ###
  #.........................................................................................................
  nonempty_text:
    base:  std.text
    # isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )
    isa:      ( x ) -> x.length isnt 0
  #.........................................................................................................
  quantity_q:
    base:  std.float
    # isa: std.float.isa
#-----------------------------------------------------------------------------------------------------------
std.add_types
  #.........................................................................................................
  quantity_u:
    base:  std.nonempty_text
#-----------------------------------------------------------------------------------------------------------
std.add_types
  #.........................................................................................................
  quantity:
    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }
    fields:
      q:      std.quantity_q
      u:      std.quantity_u
  #.........................................................................................................
  quantity_with_template:
    # create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }
    fields:
      q:      std.quantity_q
      u:      std.quantity_u
    template:
      q:      'u'

#===========================================================================================================
module.exports = { std, }
